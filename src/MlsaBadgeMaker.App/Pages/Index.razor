@page "/"
@attribute [Authorize]
@inject BadgeMakerClient _badgeMakerClient


<div class="row align-items-center">
    <div class="col-6">
        <div class="d-grid gap-2 col-6 mx-auto">
            <img src="@Base64Image" class="rounded-circle" alt="Profile picture with badge"/>
        </div>

        <div class="mt-3">
            <label for="customImageFile" class="form-label">Use a custom image</label>
            <InputFile OnChange="@HandleSelected" class="form-control" id="customImageFile"/>
        </div>
    </div>
    <div class="col-6">
        <div class="d-grid gap-2 col-6 mx-auto">
            <a class="btn btn-primary" href="@Base64Image" download="mlsa_avatar.png">Download Profile Picture</a>
            <button class="btn btn-primary">Apply to Microsoft Teams</button>
        </div>
    </div>
</div>


@code {

    public string Base64Image { get; set; }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await using var resultStream = await _badgeMakerClient.CreateBadgeAsync();
        Base64Image = await ConvertImageToBase64(resultStream);
    }

    private async Task HandleSelected(InputFileChangeEventArgs args)
    {
        await using var imageStream = args.File.OpenReadStream();
        await using var resultStream = await _badgeMakerClient.CreateBadgeAsync(args.File);
        Base64Image = await ConvertImageToBase64(resultStream);
    }

    private async Task<string> ConvertImageToBase64(Stream stream)
    {
        
        stream.Seek(0, SeekOrigin.Begin);
        await using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);

        return $"data:image/png;base64,{Convert.ToBase64String(memoryStream.ToArray())}";
    }

}
