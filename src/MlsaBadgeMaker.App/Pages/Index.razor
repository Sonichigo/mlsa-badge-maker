@page "/"
@attribute [Authorize]
@inject BadgeMakerClient _badgeMakerClient


<div class="row align-items-center">
    <div class="col-8">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Customize</h5>

                <div class="mt-3">
                    <label for="customImageFile" class="form-label">Use a custom image</label>
                    <InputFile OnChange="@HandleImageSelected" class="form-control" id="customImageFile"/>
                </div>
            </div>
        </div>
        
        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Use</h5>

                <p>Download your new shiny avatar as an image. Alternatively, you can automatically apply your new avatar to your Microsoft Teams account.</p>
                <div>
                    <a class="btn btn-primary" href="@ImageBase64" download="mlsa_avatar.png">Download Profile Picture</a>
                    <button class="btn btn-outline-primary" disabled="@string.IsNullOrEmpty(ImageBase64)" @onclick="HandleApplyToTeams">Apply to Microsoft Teams</button>
                </div>
            </div>
        </div>
    </div>

    <div class="col-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Preview</h5>
                @if (IsLoading)
                {
                    <div class="d-flex align-items-center" style="height: 260px">
                        <div class="spinner-border mx-auto" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else
                {
                    if (!string.IsNullOrEmpty(ImageBase64))
                    {
                        <div class="d-flex justify-content-center align-items-center gap-3 my-3">
                            <img src="@ImageBase64" class="img-thumbnail rounded-circle ratio ratio-1x1" style="width: 260px" alt="Profile picture with badge"/>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>


@code {

    public string ImageBase64 { get; set; }

    public Stream ImageStream { get; set; }

    public bool IsLoading { get; set; }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await DoWorkAsync(async () => await GenerateDefaultImageAsync());
    }

    private async Task HandleImageSelected(InputFileChangeEventArgs args)
    {
        await DoWorkAsync(async () => await GenerateCustomImageAsync(args.File));
    }

    private async Task HandleApplyToTeams()
    {
        if (ImageStream is null || ImageStream?.Length == 0)
            return;

        await _badgeMakerClient.ApplyBadgeToTeamsAsync(ImageStream);
    }

    private async Task GenerateDefaultImageAsync()
    {
        ImageStream = await _badgeMakerClient.CreateBadgeAsync();
        ImageBase64 = await ConvertImageToBase64(ImageStream);
    }

    private async Task GenerateCustomImageAsync(IBrowserFile file)
    {
        ImageStream = await _badgeMakerClient.CreateBadgeAsync(file);
        ImageBase64 = await ConvertImageToBase64(ImageStream);
    }

    private async Task DoWorkAsync(Func<Task> action)
    {
        IsLoading = true;
        await action.Invoke();
        IsLoading = false;
    }

    private async Task<string> ConvertImageToBase64(Stream stream)
    {
        stream.Seek(0, SeekOrigin.Begin);
        await using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);

        return $"data:image/png;base64,{Convert.ToBase64String(memoryStream.ToArray())}";
    }

}
