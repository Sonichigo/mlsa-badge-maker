@page "/"
@attribute [Authorize]
@inject BadgeMakerClient _badgeMakerClient

@if (!string.IsNullOrEmpty(StatusMessage))
{
    <div class="alert alert-dismissible alert-@StatusMessageCssClass" role="alert">
        @StatusMessage
        <button type="button" class="btn-close" @onclick="ResetStatusMessage"></button>
    </div>
}

<div class="row align-items-center">
    <div class="col-12 col-md-8">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Customize</h5>

                <div class="mt-3">
                    <label for="customImageFile" class="form-label">Upload a custom profile image</label>
                    <InputFile OnChange="@HandleImageSelected" class="form-control" id="customImageFile"
                               accept="image/png, image/jpeg" />
                    <span class="small text-muted">JPEG or PNG, 5 MB max.</span>
                </div>
            </div>
        </div>
        
        <div class="card mt-4">
            <div class="card-body">
                <h5 class="card-title">Use</h5>

                <p>Download your new shiny avatar as an image. Or let us apply your new avatar to your Microsoft Teams account for you.</p>
                <div>
                    <a class="btn btn-primary @(ImageStream is null ? "disabled" : "")" href="@ImageBase64" download="mlsa_avatar.png">Download Profile Picture</a>
                    <button class="btn btn-outline-primary" disabled="@(IsApplyingToTeams || ImageStream is null)"
                            @onclick="HandleApplyToTeams">
                        @if (IsApplyingToTeams)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        }
                        Apply to Microsoft Teams
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="col-12 col-md-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Preview</h5>
                @if (IsLoading)
                {
                    <div class="d-flex align-items-center" style="height: 260px">
                        <div class="spinner-border mx-auto" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                }
                else
                {
                    <div class="d-flex justify-content-center align-items-center gap-3 my-3">
                        <img src="@(!string.IsNullOrEmpty(ImageBase64) ? ImageBase64 : "/img/default_avatar.svg")"
                             class="img-thumbnail rounded-circle ratio ratio-1x1"
                             style="width: 260px"
                             alt="Profile picture with badge"/>
                    </div>
                }
            </div>
        </div>
    </div>
</div>


@code {

    public string ImageBase64 { get; set; }

    public Stream ImageStream { get; set; }

    public bool IsLoading { get; set; }

    public bool IsApplyingToTeams { get; set; }

    public string StatusMessage { get; set; }

    public bool IsStatusMessageSuccess { get; set; }

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        await DoWorkAsync(async () => await GenerateDefaultImageAsync());
    }

    private async Task HandleImageSelected(InputFileChangeEventArgs args)
    {
        await DoWorkAsync(async () => await GenerateCustomImageAsync(args.File));
    }

    /// <summary>
    /// Applies the previously generated image to Teams.
    /// </summary>
    /// <returns></returns>
    private async Task HandleApplyToTeams()
    {
        try
        {
            IsApplyingToTeams = true;

            if (ImageStream is null || ImageStream?.Length == 0)
                return;

            await _badgeMakerClient.ApplyBadgeToTeamsAsync(ImageStream);
            SetStatus("Your badge was successfully applied to Microsoft Teams. It could take up to 24-48 hours until it fully propagates for all users.");
        }
        catch (ApiException ex)
        {
            SetStatus(ex.Message, false);
        }
        finally
        {
            IsApplyingToTeams = false;
        }
    }

    /// <summary>
    /// Tries to generate the default image from the user's Student Ambassador profile.
    /// </summary>
    /// <returns></returns>
    private async Task GenerateDefaultImageAsync()
    {
        try
        {
            ImageStream = await _badgeMakerClient.CreateBadgeAsync();
            ImageBase64 = await ConvertImageToBase64(ImageStream);
        }
        catch (ApiException ex)
        {
            SetStatus(ex.Message, false);
        }
    }

    /// <summary>
    /// Generates a custom image based on the user's selected file.
    /// </summary>
    /// <param name="file"></param>
    /// <returns></returns>
    private async Task GenerateCustomImageAsync(IBrowserFile file)
    {
        try
        {
            ImageStream = await _badgeMakerClient.CreateBadgeAsync(file);
            ImageBase64 = await ConvertImageToBase64(ImageStream);
        }
        catch (ApiException ex)
        {
            SetStatus(ex.Message, false);
        }
    }

    // Helpers

    /// <summary>
    /// Does work.
    /// </summary>
    /// <param name="action"></param>
    /// <returns></returns>
    private async Task DoWorkAsync(Func<Task> action)
    {
        IsLoading = true;
        await action.Invoke();
        IsLoading = false;
    }

    /// <summary>
    /// Converts an image stream to a base64 string that can be displayed in the browser.
    /// </summary>
    /// <param name="stream"></param>
    /// <returns></returns>
    private async Task<string> ConvertImageToBase64(Stream stream)
    {
        stream.Seek(0, SeekOrigin.Begin);
        await using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);

        return $"data:image/png;base64,{Convert.ToBase64String(memoryStream.ToArray())}";
    }

    /// <summary>
    /// Sets and displays the status message.
    /// </summary>
    /// <param name="text">The status message.</param>
    /// <param name="isSuccess">Indicates whether the operation failed or succeeded.</param>
    private void SetStatus(string text, bool isSuccess = true)
    {
        StatusMessage = text;
        IsStatusMessageSuccess = isSuccess;
    }

    /// <summary>
    /// Computes the CSS class to display for the alert status message.
    /// </summary>
    private string StatusMessageCssClass => IsStatusMessageSuccess ? "success" : "danger";

    /// <summary>
    /// Resets the status message.
    /// </summary>
    private void ResetStatusMessage()
    {
        StatusMessage = string.Empty;
    }

}
